1、脚本格式
起始行#!/bin/sh，告诉shell用什么命令解析脚本

2、变量
变量经常用到的有4种：本地变量和环境变量
（1）本地变量
定义和赋值：
variable-name=value 设置实际值到variable-name
其他赋值方式
variable-name+value 如果设置了variable-name，则重设其值
variable-name:?value 如果未设置variable-name，显示未定义用户错误信息
variable-name?value 如果未设置variable-name，显示系统错误信息
variable-name:=value 如果未设置variable-name，设置其值。${variable-name}被替换为value。
variable-name:-value 同上，但是取值并不设置到variable-name，可以被替换
引用：
${variable-name}
清除：
unset variable-name
设置成只读：
readonly variable-name
（2）环境变量
永久设置的方法是在/etc/profile中设置
临时设置的方法是用export到处本地变量：export variable-name
一些固定的环境变量：使用set命令可以查看所有环境变量
CDPATH：cd一个目录时首先搜索CDPATH
EXINIT：vi编辑器初始化选项
HOME：用户目录
IFS：缺省分隔符
LOGNAME：登录名
（3）位置变量
$0~$9：命令参数，$0命令本身，$1~$9传递给命令的参数
（4）特定命令参数，7个
$# 传递到脚本的参数个数
$* 以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个
$$ 脚本运行的当前进程ID号
$! 后台运行的最后一个进程的进程ID号
$@ 与$#相同，但是使用时加引号，并在引号中返回每个参数
$- 显示shell使用的当前选项，与set命令功能相同
$? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。


1.${var} 
2.$(cmd) 
3.()和{} 
4.${var:-string},${var:+string},${var:=string},${var:?string} 
5.$((exp)) 
6.$(var%pattern),$(var%%pattern),$(var#pattern),$(var##pattern)
http://www.jb51.net/article/60326.htm

一些常用的正则表达式场景
1、[]：指定字符范围。如想匹配483和484两个字符串，正则表达式48[34]。
2、.：匹配任意字符数量和.的数量一致
3、*：表示匹配*之前的单字符0次或者多次。
4、^：在中括号内的表示不包括列举的字符，如[^0~9]表示不包含0~9    其他情况表示匹配行首字符，如^Seq，匹配行首是Seq的行
5、$：匹配行尾，如[34]$，匹配行尾是3或者4的行
6、\：转义字符，将正则表达式的字符转义成普通字符
7、pattern\{n\} 只用来匹配前面pattern出现次数。n为次数
8、pattern\{n,\} n只含义同上，但次数最少为n
9、pattern\{n,m\} 只含义同上，但pattern出现次数在n与m之间
