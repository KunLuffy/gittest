1、概述
awk用于格式化报文或者从文本文件中抽取数据包，awk将文本分成两级概念：记录和域，awk按照记录分隔符分割文本，每次读入一条记录，然后分成多个域。

2、使用方法
（1）命令行：awk [-F separator] 'commands' input-file
commands部分可以提取出来作为脚本，awk脚本有如下两种使用方式
（2）批处理：首行使用#!/bin/awk -f说明的批处理文件。命令格式：xxx.awk input-file
（3）awk脚本：命令格式awk -f xxx.awk input-file
当未指定separator时，默认空格为分隔符

3、模式和动作
所有awk commands都有模式和动作两部分组成。
模式可以是任何条件语句、复合语句或者正则表达式。模式有两个特殊字段：BEGIN和END。BEGIN设置计数和打印头，END在结尾输出文本总数和结尾状态标志。
动作大多在{...}中指明，大多是打印，可以通过条件判断和循环输出。
动作命令结构包括：语句以";"分割，程序块以{}划分，条件预算以()划分
（1）awk变量
$0,$1,$2,$3...$n：域标示。域是使用分隔符分开的单独区域，$1~$n分别标示第1个到第n个域。$0标示所有域。
打印域的方法是print，print可以输出固定字符串或者域信息，如果参数之间使用逗号，则输出以空格间隔。awk执行模式BEGIN时，文件还未读入，这些域标示都是空的。
注：使用 > 重定向输出到一个文件，输出则不会显示到屏幕。如果既要输出到文件，也要输出到屏幕，使用管道将标准输出传递给tee命令。
（2）向awk脚本输入的方法
命令方式：xxx.awk input-file
重定向方式：xxx.awk < input-file
管道方式：input-file | xxx.awk
（3）元字符
\ ^ $ . [ ] | ( ) * + ?
（4）条件操作符
<, <=, ==, !=, >=, ~, !~
~和!~分别表示正则表达式匹配和正则表达式不匹配，使用方式是：文本~正则表达式，文本!~正则表达式
正则匹配和==判断的一个常用场景是：正则匹配用于模糊匹配，==判断用于精确匹配
判断条件判断的语句是if，如if($3~/Dec/) print $4，第3域是否包含Dec字符串，如果包含，输出第4域
大小的比较原则，类似于strcmp，两个字符串顺序对比ASCII码，数字 < 大写字母 < 小写字母
（5）关系运算符
&& -- 关系与，|| -- 关系或。用于条件表达式组合判断。

4、awk的内置变量
ARGC：命令行参数个数
ARGV：命令行参数排列，使用ARGV[n]访问
ENVIRON：支持队列中系统环境变量的使用，使用ENVIRON["EDITOR"]方式访问
FILENAME：awk浏览的输入文件的文件名，显示当前正在处理那个文件
FNR：浏览文件的记录数，每处理一条记录数加1，新文件从头开始计数
NF：每条记录域的个数
NR：已读的记录数，每处理一行记录数加1
FS：设置分隔符，等价于-F选项
RS：记录分隔符，缺省为换行
OFS：输出域分隔符，缺省为空格
ORS：输出记录分隔符，缺省为换行
举例：使用NF去除路径获取文件名
echo "/usr/local/etc/rc.sybase" | awk -F / '{print $NF}'
输出：rc.sybase

5、awk的操作符
（1）赋值操作符
=：可以将一个值赋给一个变量，常用的场景如下
将一个域赋值给一个变量，为域设置一个有意义的域名
在BEGIN中设置常量，给后续处理使用
+=，*=，/=，%=，^=：和C语言相同
（2）条件表达式
?
（3）逻辑表达式
&&，||，!
（4）关系运算符
<，<=，==，!=，>=，>
（5）算数运算符
+, -, *, /, %, ^, ++, --

6、内置字符串函数
gsub(r,s)：在整个$0中用s替代r
gsub(r,s,t)：在整个t中用s替代r
index(s,t)：返回s中字符串t的的第一个位置
length(s)：返回s的长度
match(s,r)：测试s是否包含匹配r的字符串，并返回r的位置，0表示没有匹配到
split(s,a,fs)：使用分隔符fs，将s序列化成数组a
sprint(fmt,exp)：返回经fmt格式化的exp
sub(r,s)：用$0中最左边最长的的子串代替s
substr(s,p)：返回字符串s中从p开始的后缀部分
substr(s,p,n)：返回字符串s中从p开始长度为n的后缀部分
